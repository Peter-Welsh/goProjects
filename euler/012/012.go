/*
Project Euler problem number 12 (https://projecteuler.net/problem=12)

Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Solution By Peter Welsh
09/12/2022
*/

package main

import (
	"fmt"
	"math"
)

func main() {
	n := 500
	numDivisors := 0
	var term int
	for i := 0; ; i++ {
		term += i
		numDivisors = getNumDivisors(term)
		if numDivisors > n {
			break
		}
	}
	fmt.Println(term) // 76576500 (has 576 divisors)
}

func getNumDivisors(num int) (numDivisors int) {
	sqrt := int(math.Sqrt(float64(num)))

	for i := 1; i <= sqrt; i++ {
		if num%i == 0 {
			numDivisors++
			if i != (num / i) {
				numDivisors++
			}
		}
	}

	return numDivisors
}

//triangle numbers:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//their number of divisors:
//1, 2, 4, 04, 04, 04, 06, 09, 06, 04, ...
//index:
//0, 1, 2, 03, 04, 05, 06, 07, 08, 09, ...
