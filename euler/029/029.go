/*
Project Euler problem number 29 (https://projecteuler.net/problem=29)

Distinct powers

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

Solution By Peter Welsh
09/16/2022
*/

package main

import (
	"fmt"
	"math/big"
)

func main() {
	start := int64(2)
	end := int64(100)
	numDistinctTerms := getNumDistinctTerms(start, end)
	fmt.Println(numDistinctTerms) //9183
}

var Dummy struct{}

func getNumDistinctTerms(start int64, end int64) int {
	// key: string rather than *big.Int because comparison does not work (big 16 != big 16)
	// value: empty struct rather than bool, to save memory
	distinctTerms := make(map[string]struct{})
	x := big.NewInt(1)
	var result string
	for a := start; a <= end; a++ {
		for b := start; b <= end; b++ {
			// string(x.Bytes()) is faster than fmt.Sprintf("%v", x)
			result = string(x.Exp(big.NewInt(a), big.NewInt(b), nil).Bytes())
			distinctTerms[result] = Dummy
		}
	}
	return len(distinctTerms)
}
